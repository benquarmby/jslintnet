// <auto-generated />

namespace JSLintNet.Settings
{
    using Newtonsoft.Json;

    internal partial class JSLintNetSettings
    {
        /// <summary>
        /// Gets or sets a value indicating whether JSLint should run on save.
        /// </summary>
        /// <value>
        /// <c>true</c> if JSLint should run on save; otherwise, <c>false</c>.
        /// </value>
        [JsonProperty("runOnSave")]
        public bool? RunOnSave { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether JSLint should run on build.
        /// </summary>
        /// <value>
        /// <c>true</c> if JSLint should run on build; otherwise, <c>false</c>.
        /// </value>
        [JsonProperty("runOnBuild")]
        public bool? RunOnBuild { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the build should be canceled for JSLint errors.
        /// </summary>
        /// <value>
        /// <c>true</c> if the build should be canceled for JSLint errors; otherwise, <c>false</c>.
        /// </value>
        [JsonProperty("cancelBuild")]
        public bool? CancelBuild { get; set; }

        /// <summary>
        /// Gets or sets the the total error limit.
        /// </summary>
        /// <value>
        /// The the total error limit.
        /// </value>
        [JsonProperty("errorLimit")]
        public int? ErrorLimit { get; set; }

        /// <summary>
        /// Gets or sets the the total file limit.
        /// </summary>
        /// <value>
        /// The the total file limit.
        /// </value>
        [JsonProperty("fileLimit")]
        public int? FileLimit { get; set; }

        private void MergeRoot(JSLintNetSettings merge)
        {
            if (merge.RunOnSave.HasValue)
            {
                this.RunOnSave = merge.RunOnSave;
            }

            if (merge.RunOnBuild.HasValue)
            {
                this.RunOnBuild = merge.RunOnBuild;
            }

            if (merge.CancelBuild.HasValue)
            {
                this.CancelBuild = merge.CancelBuild;
            }

            if (merge.ErrorLimit.HasValue)
            {
                this.ErrorLimit = merge.ErrorLimit;
            }

            if (merge.FileLimit.HasValue)
            {
                this.FileLimit = merge.FileLimit;
            }
        }

        private void CloneRoot(JSLintNetSettings target)
        {
            target.RunOnSave = this.RunOnSave;
            target.RunOnBuild = this.RunOnBuild;
            target.CancelBuild = this.CancelBuild;
            target.ErrorLimit = this.ErrorLimit;
            target.FileLimit = this.FileLimit;
        }
    }
}
