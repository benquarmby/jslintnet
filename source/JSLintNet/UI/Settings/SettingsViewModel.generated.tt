<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="..\..\JSLintOptions.t4" #>
<#@ include file="..\..\Settings\JSLintNetSettings.t4" #>
// <auto-generated />

namespace JSLintNet.UI.Settings
{
    internal partial class SettingsViewModel : ViewModelBase
    {
<#
    var first = true;

    foreach (var definition in SettingDefinitions)
    {
        if (first)
        {
            first = false;
        }
        else
        {
            this.WriteLine(string.Empty);
        }

        if (definition.PropertyType == "int")
        {
#>
        public virtual string <#= definition.PropertyName #>
        {
            get
            {
                var nullable = this.Model.<#= definition.PropertyName #>;

                return nullable.HasValue ? nullable.ToString() : null;
            }

            set
            {
                this.Model.<#= definition.PropertyName #> = ParseIntFromString(value);

                this.RaisePropertyChanged("<#= definition.PropertyName #>");
            }
        }
<#
        }
        else
        {
#>
        public virtual <#= definition.PropertyType #> <#= definition.PropertyName #>
        {
            get
            {
                return this.Model.<#= definition.PropertyName #>.GetValueOrDefault();
            }

            set
            {
                this.Model.<#= definition.PropertyName #> = value ? (bool?)true : null;

                this.RaisePropertyChanged("<#= definition.PropertyName #>");
            }
        }
<#
        }
    }

    foreach (var definition in OptionDefinitions)
    {
        if (first)
        {
            first = false;
        }
        else
        {
            this.WriteLine(string.Empty);
        }

        if (definition.PropertyType == "int")
        {
#>
        public virtual string <#= definition.PropertyName #>
        {
            get
            {
                var nullable = this.Model.Options.<#= definition.PropertyName #>;

                return nullable.HasValue ? nullable.ToString() : null;
            }

            set
            {
                this.Model.Options.<#= definition.PropertyName #> = ParseIntFromString(value);

                this.RaisePropertyChanged("<#= definition.PropertyName #>");
            }
        }
<#
        }
        else
        {
#>
        public virtual <#= definition.PropertyType #> <#= definition.PropertyName #>
        {
            get
            {
                return this.Model.Options.<#= definition.PropertyName #>.GetValueOrDefault();
            }

            set
            {
                this.Model.Options.<#= definition.PropertyName #> = value ? (bool?)true : null;

                this.RaisePropertyChanged("<#= definition.PropertyName #>");
            }
        }
<#
        }
    }
#>
    }
}
