// <auto-generated />

namespace JSLintNet
{
    using System;
    using Newtonsoft.Json;

    /// <summary>
    /// Provides a simple way to create and manage the options used by JSLint.
    /// </summary>
    public class JSLintOptions: ICloneable
    {
        /// <summary>
        /// Gets or sets a value indicating whether bitwise operators should be allowed.
        /// </summary>
        /// <value>
        /// <c>true</c> if bitwise operators should be allowed; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "bitwise" option.
        /// </remarks>
        [JsonProperty("bitwise")]
        public bool? TolerateBitwiseOperators { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the standard browser globals should be predefined.
        /// </summary>
        /// <value>
        /// <c>true</c> if the standard browser globals should be predefined; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "browser" option.
        /// </remarks>
        [JsonProperty("browser")]
        public bool? AssumeBrowser { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether Couch DB globals should be predefined.
        /// </summary>
        /// <value>
        /// <c>true</c> if Couch DB globals should be predefined; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "couch" option.
        /// </remarks>
        [JsonProperty("couch")]
        public bool? AssumeCouchDB { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether browser globals that are useful in development should be predefined, and if debugger statements and TODO comments should be allowed.
        /// </summary>
        /// <value>
        /// <c>true</c> if browser globals that are useful in development should be predefined, and if debugger statements and TODO comments should be allowed; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "devel" option.
        /// </remarks>
        [JsonProperty("devel")]
        public bool? AssumeInDevelopment { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether using the good parts of ECMAScript Sixth Edition.
        /// </summary>
        /// <value>
        /// <c>true</c> if using the good parts of ECMAScript Sixth Edition; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "es6" option.
        /// </remarks>
        [JsonProperty("es6")]
        public bool? AssumeES6 { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether eval should be allowed.
        /// </summary>
        /// <value>
        /// <c>true</c> if eval should be allowed; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "eval" option.
        /// </remarks>
        [JsonProperty("eval")]
        public bool? TolerateEval { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the for statement should be allowed.
        /// </summary>
        /// <value>
        /// <c>true</c> if the for statement should be allowed; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "for" option.
        /// </remarks>
        [JsonProperty("for")]
        public bool? TolerateForStatement { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of warnings reported.
        /// </summary>
        /// <value>
        /// The maximum number of warnings reported.
        /// </value>
        /// <remarks>
        /// JSLint "maxerr" option.
        /// </remarks>
        [JsonProperty("maxerr")]
        public int? MaximumErrors { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of characters in a line.
        /// </summary>
        /// <value>
        /// The maximum number of characters in a line.
        /// </value>
        /// <remarks>
        /// JSLint "maxlen" option.
        /// </remarks>
        [JsonProperty("maxlen")]
        public int? MaximumLineLength { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether a var, let, or const statement can declare two or more variables in a single statement.
        /// </summary>
        /// <value>
        /// <c>true</c> if a var, let, or const statement can declare two or more variables in a single statement; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "multivar" option.
        /// </remarks>
        [JsonProperty("multivar")]
        public bool? TolerateMultipleVariables { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether Node.js globals should be predefined.
        /// </summary>
        /// <value>
        /// <c>true</c> if Node.js globals should be predefined; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "node" option.
        /// </remarks>
        [JsonProperty("node")]
        public bool? AssumeNode { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether single quote should be allowed to enclose string literals.
        /// </summary>
        /// <value>
        /// <c>true</c> if single quote should be allowed to enclose string literals; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "single" option.
        /// </remarks>
        [JsonProperty("single")]
        public bool? TolerateSingleQuoteStrings { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this should be allowed.
        /// </summary>
        /// <value>
        /// <c>true</c> if this should be allowed; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "this" option.
        /// </remarks>
        [JsonProperty("this")]
        public bool? TolerateThis { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether strict whitespace rules should be ignored.
        /// </summary>
        /// <value>
        /// <c>true</c> if strict whitespace rules should be ignored; otherwise, <c>false</c>.
        /// </value>
        /// <remarks>
        /// JSLint "white" option.
        /// </remarks>
        [JsonProperty("white")]
        public bool? TolerateMessyWhitespace { get; set; }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public JSLintOptions TypedClone()
        {
            var clone = new JSLintOptions();

            clone.TolerateBitwiseOperators = this.TolerateBitwiseOperators;
            clone.AssumeBrowser = this.AssumeBrowser;
            clone.AssumeCouchDB = this.AssumeCouchDB;
            clone.AssumeInDevelopment = this.AssumeInDevelopment;
            clone.AssumeES6 = this.AssumeES6;
            clone.TolerateEval = this.TolerateEval;
            clone.TolerateForStatement = this.TolerateForStatement;
            clone.MaximumErrors = this.MaximumErrors;
            clone.MaximumLineLength = this.MaximumLineLength;
            clone.TolerateMultipleVariables = this.TolerateMultipleVariables;
            clone.AssumeNode = this.AssumeNode;
            clone.TolerateSingleQuoteStrings = this.TolerateSingleQuoteStrings;
            clone.TolerateThis = this.TolerateThis;
            clone.TolerateMessyWhitespace = this.TolerateMessyWhitespace;

            return clone;
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public object Clone()
        {
            return this.TypedClone();
        }

        /// <summary>
        /// Merges the specified options into this instance.
        /// </summary>
        /// <param name="merge">The options to merge.</param>
        public void Merge(JSLintOptions merge)
        {
            if (merge.TolerateBitwiseOperators.HasValue)
            {
                this.TolerateBitwiseOperators = merge.TolerateBitwiseOperators;
            }

            if (merge.AssumeBrowser.HasValue)
            {
                this.AssumeBrowser = merge.AssumeBrowser;
            }

            if (merge.AssumeCouchDB.HasValue)
            {
                this.AssumeCouchDB = merge.AssumeCouchDB;
            }

            if (merge.AssumeInDevelopment.HasValue)
            {
                this.AssumeInDevelopment = merge.AssumeInDevelopment;
            }

            if (merge.AssumeES6.HasValue)
            {
                this.AssumeES6 = merge.AssumeES6;
            }

            if (merge.TolerateEval.HasValue)
            {
                this.TolerateEval = merge.TolerateEval;
            }

            if (merge.TolerateForStatement.HasValue)
            {
                this.TolerateForStatement = merge.TolerateForStatement;
            }

            if (merge.MaximumErrors.HasValue)
            {
                this.MaximumErrors = merge.MaximumErrors;
            }

            if (merge.MaximumLineLength.HasValue)
            {
                this.MaximumLineLength = merge.MaximumLineLength;
            }

            if (merge.TolerateMultipleVariables.HasValue)
            {
                this.TolerateMultipleVariables = merge.TolerateMultipleVariables;
            }

            if (merge.AssumeNode.HasValue)
            {
                this.AssumeNode = merge.AssumeNode;
            }

            if (merge.TolerateSingleQuoteStrings.HasValue)
            {
                this.TolerateSingleQuoteStrings = merge.TolerateSingleQuoteStrings;
            }

            if (merge.TolerateThis.HasValue)
            {
                this.TolerateThis = merge.TolerateThis;
            }

            if (merge.TolerateMessyWhitespace.HasValue)
            {
                this.TolerateMessyWhitespace = merge.TolerateMessyWhitespace;
            }
        }
    }
}
