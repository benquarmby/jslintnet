<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="JSLintOptions.t4" #>
// <auto-generated />

namespace JSLintNet
{
    using System;
    using Newtonsoft.Json;

    /// <summary>
    /// Provides a simple way to create and manage the options used by JSLint.
    /// </summary>
    public class JSLintOptions: ICloneable
    {
<#
    var first = true;

    foreach (var definition in OptionDefinitions)
    {
        if (first)
        {
            first = false;
        }
        else
        {
            this.WriteLine(string.Empty);
        }

        if (definition.PropertyType == "bool")
        {
#>
        /// <summary>
        /// Gets or sets a value indicating whether <#= definition.Description #>.
        /// </summary>
        /// <value>
        /// <c>true</c> if <#= definition.Description #>; otherwise, <c>false</c>.
        /// </value>
<#
        }
        else
        {
#>
        /// <summary>
        /// Gets or sets the <#= definition.Description #>.
        /// </summary>
        /// <value>
        /// The <#= definition.Description #>.
        /// </value>
<#
        }
#>
        /// <remarks>
        /// JSLint "<#= definition.Key #>" option.
        /// </remarks>
        [JsonProperty("<#= definition.Key #>")]
        public <#= definition.PropertyType #>? <#= definition.PropertyName #> { get; set; }
<#
    }
#>

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public JSLintOptions TypedClone()
        {
            var clone = new JSLintOptions();

<#
    foreach (var definition in OptionDefinitions)
    {
#>
            clone.<#= definition.PropertyName #> = this.<#= definition.PropertyName #>;
<#
    }
#>

            return clone;
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public object Clone()
        {
            return this.TypedClone();
        }

        /// <summary>
        /// Merges the specified options into this instance.
        /// </summary>
        /// <param name="merge">The options to merge.</param>
        public void Merge(JSLintOptions merge)
        {
<#
    first = true;

    foreach (var definition in OptionDefinitions)
    {
        if (first)
        {
            first = false;
        }
        else
        {
            this.WriteLine(string.Empty);
        }
#>
            if (merge.<#= definition.PropertyName #>.HasValue)
            {
                this.<#= definition.PropertyName #> = merge.<#= definition.PropertyName #>;
            }
<#
    }
#>
        }
    }
}
